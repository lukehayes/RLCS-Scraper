{
    "data" : [

        {
            "return_type": "void",
            "function_name": "InitWindow(int width, int height, const char *title);",
            "description":"Initialize window and OpenGL context"
        },

        {
            "return_type": "bool",
            "function_name": "WindowShouldClose(void);",
            "description":"Check if KEY_ESCAPE pressed or Close icon pressed"
        },

        {
            "return_type": "void",
            "function_name": "CloseWindow(void);",
            "description":"Close window and unload OpenGL context"
        },

        {
            "return_type": "bool",
            "function_name": "IsWindowReady(void);",
            "description":"Check if window has been initialized successfully"
        },

        {
            "return_type": "bool",
            "function_name": "IsWindowFullscreen(void);",
            "description":"Check if window is currently fullscreen"
        },

        {
            "return_type": "bool",
            "function_name": "IsWindowHidden(void);",
            "description":"Check if window is currently hidden (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "bool",
            "function_name": "IsWindowMinimized(void);",
            "description":"Check if window is currently minimized (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "bool",
            "function_name": "IsWindowMaximized(void);",
            "description":"Check if window is currently maximized (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "bool",
            "function_name": "IsWindowFocused(void);",
            "description":"Check if window is currently focused (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "bool",
            "function_name": "IsWindowResized(void);",
            "description":"Check if window has been resized last frame"
        },

        {
            "return_type": "bool",
            "function_name": "IsWindowState(unsigned int flag);",
            "description":"Check if one specific window flag is enabled"
        },

        {
            "return_type": "void",
            "function_name": "SetWindowState(unsigned int flags);",
            "description":"Set window configuration state using flags"
        },

        {
            "return_type": "void",
            "function_name": "ClearWindowState(unsigned int flags);",
            "description":"Clear window configuration state flags"
        },

        {
            "return_type": "void",
            "function_name": "ToggleFullscreen(void);",
            "description":"Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "void",
            "function_name": "MaximizeWindow(void);",
            "description":"Set window state: maximized, if resizable (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "void",
            "function_name": "MinimizeWindow(void);",
            "description":"Set window state: minimized, if resizable (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "void",
            "function_name": "RestoreWindow(void);",
            "description":"Set window state: not minimized/maximized (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "void",
            "function_name": "SetWindowIcon(Image image);",
            "description":"Set icon for window (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "void",
            "function_name": "SetWindowTitle(const char *title);",
            "description":"Set title for window (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "void",
            "function_name": "SetWindowPosition(int x, int y);",
            "description":"Set window position on screen (only PLATFORM_DESKTOP)"
        },

        {
            "return_type": "void",
            "function_name": "SetWindowMonitor(int monitor);",
            "description":"Set monitor for the current window (fullscreen mode)"
        },

        {
            "return_type": "void",
            "function_name": "SetWindowMinSize(int width, int height);",
            "description":"Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)"
        },

        {
            "return_type": "void",
            "function_name": "SetWindowSize(int width, int height);",
            "description":"Set window dimensions"
        },

        {
            "return_type": "void",
            "function_name": "*GetWindowHandle(void);",
            "description":"Get native window handle"
        },

        {
            "return_type": "int",
            "function_name": "GetScreenWidth(void);",
            "description":"Get current screen width"
        },

        {
            "return_type": "int",
            "function_name": "GetScreenHeight(void);",
            "description":"Get current screen height"
        },

        {
            "return_type": "int",
            "function_name": "GetMonitorCount(void);",
            "description":"Get number of connected monitors"
        },

        {
            "return_type": "int",
            "function_name": "GetCurrentMonitor(void);",
            "description":"Get current connected monitor"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetMonitorPosition(int monitor);",
            "description":"Get specified monitor position"
        },

        {
            "return_type": "int",
            "function_name": "GetMonitorWidth(int monitor);",
            "description":"Get specified monitor width (max available by monitor)"
        },

        {
            "return_type": "int",
            "function_name": "GetMonitorHeight(int monitor);",
            "description":"Get specified monitor height (max available by monitor)"
        },

        {
            "return_type": "int",
            "function_name": "GetMonitorPhysicalWidth(int monitor);",
            "description":"Get specified monitor physical width in millimetres"
        },

        {
            "return_type": "int",
            "function_name": "GetMonitorPhysicalHeight(int monitor);",
            "description":"Get specified monitor physical height in millimetres"
        },

        {
            "return_type": "int",
            "function_name": "GetMonitorRefreshRate(int monitor);",
            "description":"Get specified monitor refresh rate"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetWindowPosition(void);",
            "description":"Get window position XY on monitor"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetWindowScaleDPI(void);",
            "description":"Get window scale DPI factor"
        },

        {
            "return_type": "const",
            "function_name": "char *GetMonitorName(int monitor);",
            "description":"Get the human-readable, UTF-8 encoded name of the primary monitor"
        },

        {
            "return_type": "void",
            "function_name": "SetClipboardText(const char *text);",
            "description":"Set clipboard text content"
        },

        {
            "return_type": "const",
            "function_name": "char *GetClipboardText(void);",
            "description":"Get clipboard text content"
        },


        {
            "return_type": "void",
            "function_name": "ShowCursor(void);",
            "description":"Shows cursor"
        },

        {
            "return_type": "void",
            "function_name": "HideCursor(void);",
            "description":"Hides cursor"
        },

        {
            "return_type": "bool",
            "function_name": "IsCursorHidden(void);",
            "description":"Check if cursor is not visible"
        },

        {
            "return_type": "void",
            "function_name": "EnableCursor(void);",
            "description":"Enables cursor (unlock cursor)"
        },

        {
            "return_type": "void",
            "function_name": "DisableCursor(void);",
            "description":"Disables cursor (lock cursor)"
        },

        {
            "return_type": "bool",
            "function_name": "IsCursorOnScreen(void);",
            "description":"Check if cursor is on the screen"
        },

        {
            "return_type": "void",
            "function_name": "ClearBackground(Color color);",
            "description":"Set background color (framebuffer clear color)"
        },

        {
            "return_type": "void",
            "function_name": "BeginDrawing(void);",
            "description":"Setup canvas (framebuffer) to start drawing"
        },

        {
            "return_type": "void",
            "function_name": "EndDrawing(void);",
            "description":"End canvas drawing and swap buffers (double buffering)"
        },

        {
            "return_type": "void",
            "function_name": "BeginMode2D(Camera2D camera);",
            "description":"Begin 2D mode with custom camera (2D)"
        },

        {
            "return_type": "void",
            "function_name": "EndMode2D(void);",
            "description":"Ends 2D mode with custom camera"
        },

        {
            "return_type": "void",
            "function_name": "BeginMode3D(Camera3D camera);",
            "description":"Begin 3D mode with custom camera (3D)"
        },

        {
            "return_type": "void",
            "function_name": "EndMode3D(void);",
            "description":"Ends 3D mode and returns to default 2D orthographic mode"
        },

        {
            "return_type": "void",
            "function_name": "BeginTextureMode(RenderTexture2D target);",
            "description":"Begin drawing to render texture"
        },

        {
            "return_type": "void",
            "function_name": "EndTextureMode(void);",
            "description":"Ends drawing to render texture"
        },

        {
            "return_type": "void",
            "function_name": "BeginShaderMode(Shader shader);",
            "description":"Begin custom shader drawing"
        },

        {
            "return_type": "void",
            "function_name": "EndShaderMode(void);",
            "description":"End custom shader drawing (use default shader)"
        },

        {
            "return_type": "void",
            "function_name": "BeginBlendMode(int mode);",
            "description":"Begin blending mode (alpha, additive, multiplied, subtract, custom)"
        },

        {
            "return_type": "void",
            "function_name": "EndBlendMode(void);",
            "description":"End blending mode (reset to default: alpha blending)"
        },

        {
            "return_type": "void",
            "function_name": "BeginScissorMode(int x, int y, int width, int height);",
            "description":"Begin scissor mode (define screen area for following drawing)"
        },

        {
            "return_type": "void",
            "function_name": "EndScissorMode(void);",
            "description":"End scissor mode"
        },

        {
            "return_type": "void",
            "function_name": "BeginVrStereoMode(VrStereoConfig config);",
            "description":"Begin stereo rendering (requires VR simulator)"
        },

        {
            "return_type": "void",
            "function_name": "EndVrStereoMode(void);",
            "description":"End stereo rendering (requires VR simulator)"
        },

        {
            "return_type": "VrStereoConfig",
            "function_name": "LoadVrStereoConfig(VrDeviceInfo device);",
            "description":"Load VR stereo config for VR simulator device parameters"
        },

        {
            "return_type": "void",
            "function_name": "UnloadVrStereoConfig(VrStereoConfig config);",
            "description":"Unload VR stereo config"
        },

        {
            "return_type": "Shader",
            "function_name": "LoadShader(const char *vsFileName, const char *fsFileName);",
            "description":"Load shader from files and bind default locations"
        },

        {
            "return_type": "Shader",
            "function_name": "LoadShaderFromMemory(const char *vsCode, const char *fsCode);",
            "description":"Load shader from code strings and bind default locations"
        },

        {
            "return_type": "int",
            "function_name": "GetShaderLocation(Shader shader, const char *uniformName);",
            "description":"Get shader uniform location"
        },

        {
            "return_type": "int",
            "function_name": "GetShaderLocationAttrib(Shader shader, const char *attribName);",
            "description":"Get shader attribute location"
        },

        {
            "return_type": "void",
            "function_name": "SetShaderValue(Shader shader, int locIndex, const void *value, int uniformType);",
            "description":"Set shader uniform value"
        },

        {
            "return_type": "void",
            "function_name": "SetShaderValueV(Shader shader, int locIndex, const void *value, int uniformType, int count);",
            "description":"Set shader uniform value vector"
        },

        {
            "return_type": "void",
            "function_name": "SetShaderValueMatrix(Shader shader, int locIndex, Matrix mat);",
            "description":"Set shader uniform value (matrix 4x4)"
        },

        {
            "return_type": "void",
            "function_name": "SetShaderValueTexture(Shader shader, int locIndex, Texture2D texture);",
            "description":"Set shader uniform value for texture (sampler2d)"
        },

        {
            "return_type": "void",
            "function_name": "UnloadShader(Shader shader);",
            "description":"Unload shader from GPU memory (VRAM)"
        },

        {
            "return_type": "Ray",
            "function_name": "GetMouseRay(Vector2 mousePosition, Camera camera);",
            "description":"Get a ray trace from mouse position"
        },

        {
            "return_type": "Matrix",
            "function_name": "GetCameraMatrix(Camera camera);",
            "description":"Get camera transform matrix (view matrix)"
        },

        {
            "return_type": "Matrix",
            "function_name": "GetCameraMatrix2D(Camera2D camera);",
            "description":"Get camera 2d transform matrix"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetWorldToScreen(Vector3 position, Camera camera);",
            "description":"Get the screen space position for a 3d world space position"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height);",
            "description":"Get size position for a 3d world space position"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetWorldToScreen2D(Vector2 position, Camera2D camera);",
            "description":"Get the screen space position for a 2d camera world space position"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetScreenToWorld2D(Vector2 position, Camera2D camera);",
            "description":"Get the world space position for a 2d camera screen space position"
        },


        {
            "return_type": "void",
            "function_name": "SetTargetFPS(int fps);",
            "description":"Set target FPS (maximum)"
        },

        {
            "return_type": "int",
            "function_name": "GetFPS(void);",
            "description":"Get current FPS"
        },

        {
            "return_type": "float",
            "function_name": "GetFrameTime(void);",
            "description":"Get time in seconds for last frame drawn (delta time)"
        },

        {
            "return_type": "double",
            "function_name": "GetTime(void);",
            "description":"Get elapsed time in seconds since InitWindow()"
        },

        {
            "return_type": "int",
            "function_name": "GetRandomValue(int min, int max);",
            "description":"Get a random value between min and max (both included)"
        },

        {
            "return_type": "void",
            "function_name": "SetRandomSeed(unsigned int seed);",
            "description":"Set the seed for the random number generator"
        },

        {
            "return_type": "void",
            "function_name": "TakeScreenshot(const char *fileName);",
            "description":"Takes a screenshot of current screen (filename extension defines format)"
        },

        {
            "return_type": "void",
            "function_name": "SetConfigFlags(unsigned int flags);",
            "description":"Setup init configuration flags (view FLAGS)"
        },

        {
            "return_type": "void",
            "function_name": "TraceLog(int logLevel, const char *text, ...);",
            "description":"Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)"
        },

        {
            "return_type": "void",
            "function_name": "SetTraceLogLevel(int logLevel);",
            "description":"Set the current threshold (minimum) log level"
        },

        {
            "return_type": "void",
            "function_name": "*MemAlloc(int size);",
            "description":"Internal memory allocator"
        },

        {
            "return_type": "void",
            "function_name": "*MemRealloc(void *ptr, int size);",
            "description":"Internal memory reallocator"
        },

        {
            "return_type": "void",
            "function_name": "MemFree(void *ptr);",
            "description":"Internal memory free"
        },

        {
            "return_type": "void",
            "function_name": "SetTraceLogCallback(TraceLogCallback callback);",
            "description":"Set custom trace log"
        },

        {
            "return_type": "void",
            "function_name": "SetLoadFileDataCallback(LoadFileDataCallback callback);",
            "description":"Set custom file binary data loader"
        },

        {
            "return_type": "void",
            "function_name": "SetSaveFileDataCallback(SaveFileDataCallback callback);",
            "description":"Set custom file binary data saver"
        },

        {
            "return_type": "void",
            "function_name": "SetLoadFileTextCallback(LoadFileTextCallback callback);",
            "description":"Set custom file text data loader"
        },

        {
            "return_type": "void",
            "function_name": "SetSaveFileTextCallback(SaveFileTextCallback callback);",
            "description":"Set custom file text data saver"
        },

        {
            "return_type": "unsigned",
            "function_name": "char *LoadFileData(const char *fileName, unsigned int *bytesRead);",
            "description":"Load file data as byte array (read)"
        },

        {
            "return_type": "void",
            "function_name": "UnloadFileData(unsigned char *data);",
            "description":"Unload file data allocated by LoadFileData()"
        },

        {
            "return_type": "bool",
            "function_name": "SaveFileData(const char *fileName, void *data, unsigned int bytesToWrite);",
            "description":"Save data to file from byte array (write), returns true on success"
        },

        {
            "return_type": "char",
            "function_name": "*LoadFileText(const char *fileName);",
            "description":"Load text data from file (read), returns a \\0 terminated string"
        },

        {
            "return_type": "void",
            "function_name": "UnloadFileText(char *text);",
            "description":"Unload file text data allocated by LoadFileText()"
        },

        {
            "return_type": "bool",
            "function_name": "SaveFileText(const char *fileName, char *text);",
            "description":"Save text data to file (write), string must be \\0 terminated, returns true on success"
        },

        {
            "return_type": "bool",
            "function_name": "FileExists(const char *fileName);",
            "description":"Check if file exists"
        },

        {
            "return_type": "bool",
            "function_name": "DirectoryExists(const char *dirPath);",
            "description":"Check if a directory path exists"
        },

        {
            "return_type": "bool",
            "function_name": "IsFileExtension(const char *fileName, const char *ext);",
            "description":"Check file extension (including point: .png, .wav)"
        },

        {
            "return_type": "const",
            "function_name": "char *GetFileExtension(const char *fileName);",
            "description":"Get pointer to extension for a filename string (includes dot: '.png')"
        },

        {
            "return_type": "const",
            "function_name": "char *GetFileName(const char *filePath);",
            "description":"Get pointer to filename for a path string"
        },

        {
            "return_type": "const",
            "function_name": "char *GetFileNameWithoutExt(const char *filePath);",
            "description":"Get filename string without extension (uses static string)"
        },

        {
            "return_type": "const",
            "function_name": "char *GetDirectoryPath(const char *filePath);",
            "description":"Get full path for a given fileName with path (uses static string)"
        },

        {
            "return_type": "const",
            "function_name": "char *GetPrevDirectoryPath(const char *dirPath);",
            "description":"Get previous directory path for a given path (uses static string)"
        },

        {
            "return_type": "const",
            "function_name": "char *GetWorkingDirectory(void);",
            "description":"Get current working directory (uses static string)"
        },

        {
            "return_type": "char",
            "function_name": "**GetDirectoryFiles(const char *dirPath, int *count);",
            "description":"Get filenames in a directory path (memory should be freed)"
        },

        {
            "return_type": "void",
            "function_name": "ClearDirectoryFiles(void);",
            "description":"Clear directory files paths buffers (free memory)"
        },

        {
            "return_type": "bool",
            "function_name": "ChangeDirectory(const char *dir);",
            "description":"Change working directory, return true on success"
        },

        {
            "return_type": "bool",
            "function_name": "IsFileDropped(void);",
            "description":"Check if a file has been dropped into window"
        },

        {
            "return_type": "char",
            "function_name": "**GetDroppedFiles(int *count);",
            "description":"Get dropped files names (memory should be freed)"
        },

        {
            "return_type": "void",
            "function_name": "ClearDroppedFiles(void);",
            "description":"Clear dropped files paths buffer (free memory)"
        },

        {
            "return_type": "long",
            "function_name": "GetFileModTime(const char *fileName);",
            "description":"Get file modification time (last write time)"
        },

        {
            "return_type": "unsigned",
            "function_name": "char *CompressData(unsigned char *data, int dataLength, int *compDataLength);",
            "description":"Compress data (DEFLATE algorithm)"
        },

        {
            "return_type": "unsigned",
            "function_name": "char *DecompressData(unsigned char *compData, int compDataLength, int *dataLength);",
            "description":"Decompress data (DEFLATE algorithm)"
        },

        {
            "return_type": "char",
            "function_name": "*EncodeDataBase64(const unsigned char *data, int dataLength, int *outputLength);",
            "description":"Encode data to Base64 string"
        },

        {
            "return_type": "unsigned",
            "function_name": "char *DecodeDataBase64(unsigned char *data, int *outputLength);",
            "description":"Decode Base64 string data"
        },


        {
            "return_type": "bool",
            "function_name": "SaveStorageValue(unsigned int position, int value);",
            "description":"Save integer value to storage file (to defined position), returns true on success"
        },

        {
            "return_type": "int",
            "function_name": "LoadStorageValue(unsigned int position);",
            "description":"Load integer value from storage file (from defined position)"
        },


        {
            "return_type": "void",
            "function_name": "OpenURL(const char *url);",
            "description":"Open URL with default system browser (if available)"
        },


        {
            "return_type": "bool",
            "function_name": "IsKeyPressed(int key);",
            "description":"Check if a key has been pressed once"
        },

        {
            "return_type": "bool",
            "function_name": "IsKeyDown(int key);",
            "description":"Check if a key is being pressed"
        },

        {
            "return_type": "bool",
            "function_name": "IsKeyReleased(int key);",
            "description":"Check if a key has been released once"
        },

        {
            "return_type": "bool",
            "function_name": "IsKeyUp(int key);",
            "description":"Check if a key is NOT being pressed"
        },

        {
            "return_type": "void",
            "function_name": "SetExitKey(int key);",
            "description":"Set a custom key to exit program (default is ESC)"
        },

        {
            "return_type": "int",
            "function_name": "GetKeyPressed(void);",
            "description":"Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty"
        },

        {
            "return_type": "int",
            "function_name": "GetCharPressed(void);",
            "description":"Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty"
        },

        {
            "return_type": "bool",
            "function_name": "IsGamepadAvailable(int gamepad);",
            "description":"Check if a gamepad is available"
        },

        {
            "return_type": "const",
            "function_name": "char *GetGamepadName(int gamepad);",
            "description":"Get gamepad internal name id"
        },

        {
            "return_type": "bool",
            "function_name": "IsGamepadButtonPressed(int gamepad, int button);",
            "description":"Check if a gamepad button has been pressed once"
        },

        {
            "return_type": "bool",
            "function_name": "IsGamepadButtonDown(int gamepad, int button);",
            "description":"Check if a gamepad button is being pressed"
        },

        {
            "return_type": "bool",
            "function_name": "IsGamepadButtonReleased(int gamepad, int button);",
            "description":"Check if a gamepad button has been released once"
        },

        {
            "return_type": "bool",
            "function_name": "IsGamepadButtonUp(int gamepad, int button);",
            "description":"Check if a gamepad button is NOT being pressed"
        },

        {
            "return_type": "int",
            "function_name": "GetGamepadButtonPressed(void);",
            "description":"Get the last gamepad button pressed"
        },

        {
            "return_type": "int",
            "function_name": "GetGamepadAxisCount(int gamepad);",
            "description":"Get gamepad axis count for a gamepad"
        },

        {
            "return_type": "float",
            "function_name": "GetGamepadAxisMovement(int gamepad, int axis);",
            "description":"Get axis movement value for a gamepad axis"
        },

        {
            "return_type": "int",
            "function_name": "SetGamepadMappings(const char *mappings);",
            "description":"Set internal gamepad mappings (SDL_GameControllerDB)"
        },

        {
            "return_type": "bool",
            "function_name": "IsMouseButtonPressed(int button);",
            "description":"Check if a mouse button has been pressed once"
        },

        {
            "return_type": "bool",
            "function_name": "IsMouseButtonDown(int button);",
            "description":"Check if a mouse button is being pressed"
        },

        {
            "return_type": "bool",
            "function_name": "IsMouseButtonReleased(int button);",
            "description":"Check if a mouse button has been released once"
        },

        {
            "return_type": "bool",
            "function_name": "IsMouseButtonUp(int button);",
            "description":"Check if a mouse button is NOT being pressed"
        },

        {
            "return_type": "int",
            "function_name": "GetMouseX(void);",
            "description":"Get mouse position X"
        },

        {
            "return_type": "int",
            "function_name": "GetMouseY(void);",
            "description":"Get mouse position Y"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetMousePosition(void);",
            "description":"Get mouse position XY"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetMouseDelta(void);",
            "description":"Get mouse delta between frames"
        },

        {
            "return_type": "void",
            "function_name": "SetMousePosition(int x, int y);",
            "description":"Set mouse position XY"
        },

        {
            "return_type": "void",
            "function_name": "SetMouseOffset(int offsetX, int offsetY);",
            "description":"Set mouse offset"
        },

        {
            "return_type": "void",
            "function_name": "SetMouseScale(float scaleX, float scaleY);",
            "description":"Set mouse scaling"
        },

        {
            "return_type": "float",
            "function_name": "GetMouseWheelMove(void);",
            "description":"Get mouse wheel movement Y"
        },

        {
            "return_type": "void",
            "function_name": "SetMouseCursor(int cursor);",
            "description":"Set mouse cursor"
        },

        {
            "return_type": "int",
            "function_name": "GetTouchX(void);",
            "description":"Get touch position X for touch point 0 (relative to screen size)"
        },

        {
            "return_type": "int",
            "function_name": "GetTouchY(void);",
            "description":"Get touch position Y for touch point 0 (relative to screen size)"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetTouchPosition(int index);",
            "description":"Get touch position XY for a touch point index (relative to screen size)"
        },

        {
            "return_type": "int",
            "function_name": "GetTouchPointId(int index);",
            "description":"Get touch point identifier for given index"
        },

        {
            "return_type": "int",
            "function_name": "GetTouchPointCount(void);",
            "description":"Get number of touch points"
        },


        {
            "return_type": "void",
            "function_name": "SetGesturesEnabled(unsigned int flags);",
            "description":"Enable a set of gestures using flags"
        },

        {
            "return_type": "bool",
            "function_name": "IsGestureDetected(int gesture);",
            "description":"Check if a gesture have been detected"
        },

        {
            "return_type": "int",
            "function_name": "GetGestureDetected(void);",
            "description":"Get latest detected gesture"
        },

        {
            "return_type": "float",
            "function_name": "GetGestureHoldDuration(void);",
            "description":"Get gesture hold time in milliseconds"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetGestureDragVector(void);",
            "description":"Get gesture drag vector"
        },

        {
            "return_type": "float",
            "function_name": "GetGestureDragAngle(void);",
            "description":"Get gesture drag angle"
        },

        {
            "return_type": "Vector2",
            "function_name": "GetGesturePinchVector(void);",
            "description":"Get gesture pinch delta"
        },

        {
            "return_type": "float",
            "function_name": "GetGesturePinchAngle(void);",
            "description":"Get gesture pinch angle"
        },

        {
            "return_type": "void",
            "function_name": "SetCameraMode(Camera camera, int mode);",
            "description":"Set camera mode (multiple camera modes available)"
        },

        {
            "return_type": "void",
            "function_name": "UpdateCamera(Camera *camera);",
            "description":"Update camera position for selected mode"
        },

        {
            "return_type": "void",
            "function_name": "SetCameraPanControl(int keyPan);",
            "description":"Set camera pan key to combine with mouse movement (free camera)"
        },

        {
            "return_type": "void",
            "function_name": "SetCameraAltControl(int keyAlt);",
            "description":"Set camera alt key to combine with mouse movement (free camera)"
        },

        {
            "return_type": "void",
            "function_name": "SetCameraSmoothZoomControl(int keySmoothZoom);",
            "description":"Set camera smooth zoom key to combine with mouse (free camera)"
        },

        {
        "return_type": "void",
        "function_name": "SetCameraMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown);",
        "description":"Set camera move controls (1st person and 3rd person cameras)"
}
    ]

}
